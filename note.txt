-  diff

check the difference between file
     $diff -u oldfile newfile

- commit

manually update the code, using a node named Commit
     $git commit

- log

Check the history of the commit, which has the
     $git log
commit ID
Author
Date
     msg of commit

Will give the detail statistic of what file you changes.
     $git log —stat

- repository

Track multiple file in a project. Once I commit, I will submit all the current version of files int the repository

- clone

Not only copy the code, but also clone it history
     $git clone [repo url]

- checkout

going back the history version
     $git checkout [commitID]

- initial a repository
.git folder save all the history
    $git init

- check status of repo

check the changing of files
$git status

- Different space

When you want to commit file in git work space, you could upload partial of it in the area call stage area. Then commit the file in staging area to your repository.
     $ git add [file name]

- git diff

check the difference between each version
     $git diff [commitID1] [commitID2]

check the difference between working directory and staging area.
Checking the recent modification you have made, show the update of the repo
     $git diff

If you want to redo the changes, you could go to the last version in staging area.
**important** this step is irreversible. You cannot go back after this cmd
     $git reset —hard

check the difference between staging area with recent commit
     $git diff —staged

- branches

Keep different version of the development which can be merge later
Using to check the current branch
    $git branch

Using to create a new branch with a argument
    $git branch [branch_name]

We could use checkout to jump to other branch
    $git checkout [branch_name]

You could create a new branch and checkout to that branch in one single cmd
    $git checkout -b [branch_name]

check the branch graph provided by git
     $git log —graph —oneline [branch_name1] [branch_name2]

Delete a branch
     $git branch -d [branch_name]

- merge

Merge different branch together, cmd shows how to merge branch2 to branch1
    $git merge [branch1]  [branch2]

Or you could do
    $git checkout [branch1]
    $git merge [branch2]
    
conflict may happen if they both modify the same line of code, you could fix the conflict or abort the merge
To abort the merge, you could run cmd:
    $git merge —abort

To show the commit’s diff in the original after merge, you could run
    $git show [commit_ID]

- remote(github)

check the remote repo:
     $git remote
check with verbose:
     $git remote -v
add a remote repo:
     $git remote add [name of the branch(origin)]  url
push to the remote repo
     $git push [remote branch] [local branch]
pull from the remote repo to local, no conflict(fast-forward merge) if the remote is the ancestor of the local commit
     $git pull [remote branch] [local branch]

Collaborating with other

- fork(github feature)

remote will also be my remote repo

- conflict happened between the remote repo and the local commit
- fetch+merge or pull

Update the local copy of remote branch
     $git fetch [remote branch]
Solve the conflict, and update the local file
     $git pull [remote branch] [master] =
     $git fetch [remote branch] + $git merge [local branch] [local brach of origin remote branch]
